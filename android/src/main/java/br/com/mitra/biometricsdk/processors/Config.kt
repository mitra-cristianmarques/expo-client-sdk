//
// FaceTec Device SDK config file.
// Auto-generated via the FaceTec SDK Configuration Wizard
//
package br.com.mitra.biometricsdk.processors

import android.content.Context
import android.graphics.Color
import android.util.Base64
import android.util.Log
import br.com.mitra.biometricsdk.R
import br.com.mitra.biometricsdk.SampleAppActivity
import com.facetec.sdk.FaceTecCancelButtonCustomization.ButtonLocation
import com.facetec.sdk.FaceTecCustomization
import com.facetec.sdk.FaceTecSDK
import com.facetec.sdk.FaceTecSDK.InitializeCallback
import com.facetec.sdk.FaceTecSecurityWatermarkImage
import okhttp3.Call
import okhttp3.Callback
import okhttp3.FormBody
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody
import okhttp3.Response
import org.json.JSONException
import org.json.JSONObject
import java.io.IOException

// BuildConfig will be generated during build
object Config {
    var clientID: String = ""
    var clientSecret: String = ""
    var baseURLCredentials: String = ""

    // -------------------------------------
    // REQUIRED
    // Available at https://dev.facetec.com/account
    // NOTE: This field is auto-populated by the FaceTec SDK Configuration Wizard.
    var DeviceKeyIdentifier: String = ""

    // -------------------------------------
    // REQUIRED
    // The URL to call to process FaceTec SDK Sessions.
    // In Production, you likely will handle network requests elsewhere and without the use of this variable.
    // See https://dev.facetec.com/security-best-practices?link=facetec-server-rest-endpoint-security for more information.
    // NOTE: This field is auto-populated by the FaceTec SDK Configuration Wizard.
    var BaseURL: String = ""

    // -------------------------------------
    // REQUIRED
    // The FaceScan Encryption Key you define for your application.
    // Please see https://dev.facetec.com/facemap-encryption-keys for more information.
    // NOTE: This field is auto-populated by the FaceTec SDK Configuration Wizard.
    var PublicFaceScanEncryptionKey: String = ""

    var ProductionKeyText: String = ""

    var accessToken: String? = null

    private val client = OkHttpClient()

    // -------------------------------------
    // Convenience method to initialize the FaceTec SDK.
    // NOTE: This function is auto-populated by the FaceTec SDK Configuration Wizard based on the Keys issued to your Apps.
    fun initializeFaceTecSDKFromAutogeneratedConfig(
        context: Context,
        callback: InitializeCallback?
    ) {
        FaceTecSDK.initializeInProductionMode(
            context,
            ProductionKeyText,
            DeviceKeyIdentifier,
            PublicFaceScanEncryptionKey,
            callback
        )
    }


    // -------------------------------------
    // This app can modify the customization to demonstrate different look/feel preferences
    // NOTE: This function is auto-populated by the FaceTec SDK Configuration Wizard based on your UI Customizations you picked in the Configuration Wizard GUI.
    fun retrieveConfigurationWizardCustomization(): FaceTecCustomization {
        // For Color Customization

        val outerBackgroundColor = Color.parseColor("#ffffff")
        val frameColor = Color.parseColor("#ffffff")
        val borderColor = Color.parseColor("#417FB2")
        val ovalColor = Color.parseColor("#417FB2")
        val dualSpinnerColor = Color.parseColor("#417FB2")
        val textColor = Color.parseColor("#417FB2")
        val buttonAndFeedbackBarColor = Color.parseColor("#417FB2")
        val buttonAndFeedbackBarTextColor = Color.parseColor("#ffffff")
        val buttonColorHighlight = Color.parseColor("#396E99")
        val buttonColorDisabled = Color.parseColor("#B9CCDE")

        // For Frame Corner Radius Customization
        val frameCornerRadius = 20

        // For Cancel Button Customization
        val cancelButtonImage = R.drawable.facetec_cancel
        val cancelButtonLocation = ButtonLocation.TOP_LEFT

        // For image Customization
        val yourAppLogoImage = R.drawable.facetec_your_app_logo
        val securityWatermarkImage = FaceTecSecurityWatermarkImage.FACETEC


        // Set a default customization
        val defaultCustomization = FaceTecCustomization()


        // Set Frame Customization
        defaultCustomization.getFrameCustomization().cornerRadius = frameCornerRadius
        defaultCustomization.getFrameCustomization().backgroundColor = frameColor
        defaultCustomization.getFrameCustomization().borderColor = borderColor

        // Set Overlay Customization
        defaultCustomization.getOverlayCustomization().brandingImage = yourAppLogoImage
        defaultCustomization.getOverlayCustomization().backgroundColor = outerBackgroundColor

        // Set Guidance Customization
        defaultCustomization.getGuidanceCustomization().backgroundColors = frameColor
        defaultCustomization.getGuidanceCustomization().foregroundColor = textColor
        defaultCustomization.getGuidanceCustomization().buttonBackgroundNormalColor =
            buttonAndFeedbackBarColor
        defaultCustomization.getGuidanceCustomization().buttonBackgroundDisabledColor =
            buttonColorDisabled
        defaultCustomization.getGuidanceCustomization().buttonBackgroundHighlightColor =
            buttonColorHighlight
        defaultCustomization.getGuidanceCustomization().buttonTextNormalColor =
            buttonAndFeedbackBarTextColor
        defaultCustomization.getGuidanceCustomization().buttonTextDisabledColor =
            buttonAndFeedbackBarTextColor
        defaultCustomization.getGuidanceCustomization().buttonTextHighlightColor =
            buttonAndFeedbackBarTextColor
        defaultCustomization.getGuidanceCustomization().retryScreenImageBorderColor = borderColor
        defaultCustomization.getGuidanceCustomization().retryScreenOvalStrokeColor = borderColor

        // Set Oval Customization
        defaultCustomization.getOvalCustomization().strokeColor = ovalColor
        defaultCustomization.getOvalCustomization().progressColor1 = dualSpinnerColor
        defaultCustomization.getOvalCustomization().progressColor2 = dualSpinnerColor

        // Set Feedback Customization
        defaultCustomization.getFeedbackCustomization().backgroundColors = buttonAndFeedbackBarColor
        defaultCustomization.getFeedbackCustomization().textColor = buttonAndFeedbackBarTextColor

        // Set Cancel Customization
        defaultCustomization.getCancelButtonCustomization().customImage = cancelButtonImage
        defaultCustomization.getCancelButtonCustomization().setLocation(cancelButtonLocation)

        // Set Result Screen Customization
        defaultCustomization.getResultScreenCustomization().backgroundColors = frameColor
        defaultCustomization.getResultScreenCustomization().foregroundColor = textColor
        defaultCustomization.getResultScreenCustomization().activityIndicatorColor =
            buttonAndFeedbackBarColor
        defaultCustomization.getResultScreenCustomization().resultAnimationBackgroundColor =
            buttonAndFeedbackBarColor
        defaultCustomization.getResultScreenCustomization().resultAnimationForegroundColor =
            buttonAndFeedbackBarTextColor
        defaultCustomization.getResultScreenCustomization().uploadProgressFillColor =
            buttonAndFeedbackBarColor

        // Set Security Watermark Customization
        defaultCustomization.securityWatermarkImage = securityWatermarkImage

        // Set ID Scan Customization
        defaultCustomization.getIdScanCustomization().selectionScreenBackgroundColors = frameColor
        defaultCustomization.getIdScanCustomization().selectionScreenForegroundColor = textColor
        defaultCustomization.getIdScanCustomization().reviewScreenBackgroundColors = frameColor
        defaultCustomization.getIdScanCustomization().reviewScreenForegroundColor =
            buttonAndFeedbackBarTextColor
        defaultCustomization.getIdScanCustomization().reviewScreenTextBackgroundColor =
            buttonAndFeedbackBarColor
        defaultCustomization.getIdScanCustomization().captureScreenForegroundColor =
            buttonAndFeedbackBarTextColor
        defaultCustomization.getIdScanCustomization().captureScreenTextBackgroundColor =
            buttonAndFeedbackBarColor
        defaultCustomization.getIdScanCustomization().buttonBackgroundNormalColor =
            buttonAndFeedbackBarColor
        defaultCustomization.getIdScanCustomization().buttonBackgroundDisabledColor =
            buttonColorDisabled
        defaultCustomization.getIdScanCustomization().buttonBackgroundHighlightColor =
            buttonColorHighlight
        defaultCustomization.getIdScanCustomization().buttonTextNormalColor =
            buttonAndFeedbackBarTextColor
        defaultCustomization.getIdScanCustomization().buttonTextDisabledColor =
            buttonAndFeedbackBarTextColor
        defaultCustomization.getIdScanCustomization().buttonTextHighlightColor =
            buttonAndFeedbackBarTextColor
        defaultCustomization.getIdScanCustomization().captureScreenBackgroundColor = frameColor
        defaultCustomization.getIdScanCustomization().captureFrameStrokeColor = borderColor


        return defaultCustomization
    }


    fun retrieveLowLightConfigurationWizardCustomization(): FaceTecCustomization {
        return retrieveConfigurationWizardCustomization()
    }


    fun retrieveDynamicDimmingConfigurationWizardCustomization(): FaceTecCustomization {
        return retrieveConfigurationWizardCustomization()
    }


    var currentCustomization: FaceTecCustomization = retrieveConfigurationWizardCustomization()
    var currentLowLightCustomization: FaceTecCustomization =
        retrieveLowLightConfigurationWizardCustomization()
    var currentDynamicDimmingCustomization: FaceTecCustomization =
        retrieveDynamicDimmingConfigurationWizardCustomization()

    // -------------------------------------
    // Boolean to indicate the FaceTec SDK Configuration Wizard was used to generate this file.
    // In this Sample App, if this variable is true, a "Config Wizard Theme" will be added to this App's "Toggle Colors & Themes" menu,
    // and choosing this option will set the FaceTec SDK UI/UX Customizations to the Customizations that you selected in the
    // Configuration Wizard.
    var wasSDKConfiguredWithConfigWizard: Boolean = true

    fun AuthenticateAgipee() {
        try {
            val formBody: RequestBody = FormBody.Builder().add("client_id", clientID)
                .add("client_secret", clientSecret).build()

            val request = Request.Builder()
                .url(baseURLCredentials).post(formBody).build()
            client.newCall(request).enqueue(object : Callback {
                override fun onFailure(call: Call, e: IOException?) {
                    println(e)
                }

                @Throws(IOException::class)
                override fun onResponse(call: Call, response: Response) {
                    checkNotNull(response.body())
                    val responseString = response.body()!!.string()
                    response.body()!!.close()
                    try {
                        val responseJSON = JSONObject(responseString)
                        accessToken = responseJSON.getString("access_token")
                    } catch (e: JSONException) {
                        // CASE:  Parsing the response into JSON failed --> You define your own API contracts with yourself and may choose to do something different here based on the error.  Solid server-side code should ensure you don't get to this case.
                        e.printStackTrace()
                        Log.d(
                            "FaceTecSDKSampleApp",
                            "Exception raised while attempting to parse JSON result."
                        )
                    }
                }
            })
        } catch (e: Exception) {
            e.printStackTrace()
            Log.d(
                "FaceTecSDKSampleApp",
                "Exception raised while attempting to create JSON payload for upload."
            )
        }
    }

    fun getConfigFacetec(sampleAppActivity: SampleAppActivity) {
        try {
            val request = Request.Builder()
                .url("https://vinhedo-portal-cidadao-api.mitraonline.com.br/api/v1/configuracao/facetec/pesquisar")
                .get().build()
            client.newCall(request).enqueue(object : Callback {
                override fun onFailure(call: Call, e: IOException?) {
                    println(e)
                }

                @Throws(IOException::class)
                override fun onResponse(call: Call, response: Response) {
                    checkNotNull(response.body())
                    val responseString = response.body()!!.string()
                    response.body()!!.close()
                    try {
                        val responseJSON = JSONObject(responseString)
                        val dados = responseJSON.getString("dados")
                        val dadosJSON = JSONObject(dados)
                        val apiResultado = dadosJSON.getString("apiResultado")
                        if (apiResultado == "S") {
                            val apiDadosBase64 = dadosJSON.getString("apiDados")
                            val decodeValueApiDados = Base64.decode(apiDadosBase64, Base64.DEFAULT)
                            val apiDados = kotlin.text.String(decodeValueApiDados!!)
                            val apiDadosJSON = JSONObject(apiDados)

                            DeviceKeyIdentifier = apiDadosJSON.getString("device_key")
                            BaseURL = apiDadosJSON.getString("base_url")
                            PublicFaceScanEncryptionKey =
                                apiDadosJSON.getString("public_encription_key")

                            ProductionKeyText = apiDadosJSON.getString("public_text_key")

                            clientID = apiDadosJSON.getString("client_id")
                            clientSecret = apiDadosJSON.getString("client_secret")
                            baseURLCredentials = apiDadosJSON.getString("base_url_credentials")

                            AuthenticateAgipee()

                            // Initialize FaceTec SDK
                            initializeFaceTecSDKFromAutogeneratedConfig(
                                sampleAppActivity,
                                object : InitializeCallback {
                                    override fun onCompletion(successful: Boolean) {
                                        if (successful) {
                                            sampleAppActivity.utils.enableAllButtons()

                                            //Pega as variaves passadas do FaceTecModule para iniciar um módulo específico
                                            val extras = sampleAppActivity.getIntent().getExtras()
                                            val inicialModule = extras!!.getString("inicialModule")
                                            val externalID = extras.getString("externalID")

                                            sampleAppActivity.latestExternalDatabaseRefID =
                                                externalID


                                            //Faz as verificações para ver qual módulo iniciar diretamente
                                            when (inicialModule) {
                                                "livenessCheck" -> sampleAppActivity.onLivenessCheckPressed(
                                                    null
                                                )

                                                "enrollUser" -> sampleAppActivity.onEnrollUserPressed(
                                                    null
                                                )

                                                "authenticateUser" -> sampleAppActivity.onVerifyUserPressed(
                                                    null
                                                )

                                                "photoIDMatch" -> sampleAppActivity.onPhotoIDMatchPressed(
                                                    null
                                                )

                                                "photoIDScanOnly" -> sampleAppActivity.onPhotoIDScanOnlyPressed(
                                                    null
                                                )

                                                else -> {}
                                            }
                                        } else {
                                            // Displays the FaceTec SDK Status to text field if init failed.
                                            sampleAppActivity.utils.displayStatus(
                                                FaceTecSDK.getStatus(
                                                    sampleAppActivity
                                                ).toString()
                                            )
                                        }
                                    }
                                })
                        }
                    } catch (e: JSONException) {
                        // CASE:  Parsing the response into JSON failed --> You define your own API contracts with yourself and may choose to do something different here based on the error.  Solid server-side code should ensure you don't get to this case.
                        e.printStackTrace()
                        Log.d(
                            "FaceTecSDKSampleApp",
                            "Exception raised while attempting to parse JSON result."
                        )
                    }
                }
            })
        } catch (e: Exception) {
            e.printStackTrace()
            Log.d(
                "FaceTecSDKSampleApp",
                "Exception raised while attempting to create JSON payload for upload."
            )
        }
    }
}
