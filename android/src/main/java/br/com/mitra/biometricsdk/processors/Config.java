//
// FaceTec Device SDK config file.
// Auto-generated via the FaceTec SDK Configuration Wizard
//
package br.com.mitra.biometricsdk.processors;

import android.content.Context;
import android.graphics.Color;
import android.util.Log;

// BuildConfig will be generated during build
import com.facetec.sdk.*;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;

import androidx.annotation.NonNull;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.FormBody;
import okhttp3.OkHttpClient;
import okhttp3.RequestBody;
import okhttp3.Response;

import android.os.Bundle;
import android.util.Base64;
import android.content.Intent;
import br.com.mitra.biometricsdk.SampleAppActivity;

public class Config {

    public static String clientID = "";
    public static String clientSecret = "";
    public static String baseURLCredentials = "";

    // -------------------------------------
    // REQUIRED
    // Available at https://dev.facetec.com/account
    // NOTE: This field is auto-populated by the FaceTec SDK Configuration Wizard.
    public static String DeviceKeyIdentifier = "";

    // -------------------------------------
    // REQUIRED
    // The URL to call to process FaceTec SDK Sessions.
    // In Production, you likely will handle network requests elsewhere and without the use of this variable.
    // See https://dev.facetec.com/security-best-practices?link=facetec-server-rest-endpoint-security for more information.
    // NOTE: This field is auto-populated by the FaceTec SDK Configuration Wizard.
    public static String BaseURL = "";

    // -------------------------------------
    // REQUIRED
    // The FaceScan Encryption Key you define for your application.
    // Please see https://dev.facetec.com/facemap-encryption-keys for more information.
    // NOTE: This field is auto-populated by the FaceTec SDK Configuration Wizard.
    static String PublicFaceScanEncryptionKey = "";

    static String ProductionKeyText = "";

    public static String accessToken = null;

    private static final OkHttpClient client = new OkHttpClient();

    // -------------------------------------
    // Convenience method to initialize the FaceTec SDK.
    // NOTE: This function is auto-populated by the FaceTec SDK Configuration Wizard based on the Keys issued to your Apps.
        
    public static void initializeFaceTecSDKFromAutogeneratedConfig(Context context, FaceTecSDK.InitializeCallback callback) {
        FaceTecSDK.initializeInProductionMode(context, ProductionKeyText, DeviceKeyIdentifier, PublicFaceScanEncryptionKey, callback);
    }
    

    // -------------------------------------
    // This app can modify the customization to demonstrate different look/feel preferences
    // NOTE: This function is auto-populated by the FaceTec SDK Configuration Wizard based on your UI Customizations you picked in the Configuration Wizard GUI.
    public static FaceTecCustomization retrieveConfigurationWizardCustomization() {
        
        // For Color Customization
        int outerBackgroundColor = Color.parseColor("#ffffff");
        int frameColor = Color.parseColor("#ffffff");
        int borderColor = Color.parseColor("#417FB2");
        int ovalColor = Color.parseColor("#417FB2");
        int dualSpinnerColor = Color.parseColor("#417FB2");
        int textColor = Color.parseColor("#417FB2");
        int buttonAndFeedbackBarColor =  Color.parseColor("#417FB2");
        int buttonAndFeedbackBarTextColor = Color.parseColor("#ffffff");
        int buttonColorHighlight = Color.parseColor("#396E99");
        int buttonColorDisabled = Color.parseColor("#B9CCDE");

        // For Frame Corner Radius Customization
        int frameCornerRadius = 20;

        // For Cancel Button Customization
        int cancelButtonImage = R.drawable.facetec_cancel;
        FaceTecCancelButtonCustomization.ButtonLocation cancelButtonLocation = FaceTecCancelButtonCustomization.ButtonLocation.TOP_LEFT;

        // For image Customization
        int yourAppLogoImage = R.drawable.facetec_your_app_logo;
        FaceTecSecurityWatermarkImage securityWatermarkImage = FaceTecSecurityWatermarkImage.FACETEC;
        

        // Set a default customization
        FaceTecCustomization defaultCustomization = new FaceTecCustomization();

        
        // Set Frame Customization
        defaultCustomization.getFrameCustomization().cornerRadius = frameCornerRadius;
        defaultCustomization.getFrameCustomization().backgroundColor = frameColor;
        defaultCustomization.getFrameCustomization().borderColor = borderColor;

        // Set Overlay Customization
        defaultCustomization.getOverlayCustomization().brandingImage = yourAppLogoImage;
        defaultCustomization.getOverlayCustomization().backgroundColor = outerBackgroundColor;

        // Set Guidance Customization
        defaultCustomization.getGuidanceCustomization().backgroundColors = frameColor;
        defaultCustomization.getGuidanceCustomization().foregroundColor = textColor;
        defaultCustomization.getGuidanceCustomization().buttonBackgroundNormalColor = buttonAndFeedbackBarColor;
        defaultCustomization.getGuidanceCustomization().buttonBackgroundDisabledColor = buttonColorDisabled;
        defaultCustomization.getGuidanceCustomization().buttonBackgroundHighlightColor = buttonColorHighlight;
        defaultCustomization.getGuidanceCustomization().buttonTextNormalColor = buttonAndFeedbackBarTextColor;
        defaultCustomization.getGuidanceCustomization().buttonTextDisabledColor = buttonAndFeedbackBarTextColor;
        defaultCustomization.getGuidanceCustomization().buttonTextHighlightColor = buttonAndFeedbackBarTextColor;
        defaultCustomization.getGuidanceCustomization().retryScreenImageBorderColor = borderColor;
        defaultCustomization.getGuidanceCustomization().retryScreenOvalStrokeColor = borderColor;

        // Set Oval Customization
        defaultCustomization.getOvalCustomization().strokeColor = ovalColor;
        defaultCustomization.getOvalCustomization().progressColor1 = dualSpinnerColor;
        defaultCustomization.getOvalCustomization().progressColor2 = dualSpinnerColor;

        // Set Feedback Customization
        defaultCustomization.getFeedbackCustomization().backgroundColors = buttonAndFeedbackBarColor;
        defaultCustomization.getFeedbackCustomization().textColor = buttonAndFeedbackBarTextColor;

        // Set Cancel Customization
        defaultCustomization.getCancelButtonCustomization().customImage = cancelButtonImage;
        defaultCustomization.getCancelButtonCustomization().setLocation(cancelButtonLocation);

        // Set Result Screen Customization
        defaultCustomization.getResultScreenCustomization().backgroundColors = frameColor;
        defaultCustomization.getResultScreenCustomization().foregroundColor = textColor;
        defaultCustomization.getResultScreenCustomization().activityIndicatorColor = buttonAndFeedbackBarColor;
        defaultCustomization.getResultScreenCustomization().resultAnimationBackgroundColor = buttonAndFeedbackBarColor;
        defaultCustomization.getResultScreenCustomization().resultAnimationForegroundColor = buttonAndFeedbackBarTextColor;
        defaultCustomization.getResultScreenCustomization().uploadProgressFillColor = buttonAndFeedbackBarColor;

        // Set Security Watermark Customization
        defaultCustomization.securityWatermarkImage = securityWatermarkImage;

        // Set ID Scan Customization
        defaultCustomization.getIdScanCustomization().selectionScreenBackgroundColors = frameColor;
        defaultCustomization.getIdScanCustomization().selectionScreenForegroundColor = textColor;
        defaultCustomization.getIdScanCustomization().reviewScreenBackgroundColors = frameColor;
        defaultCustomization.getIdScanCustomization().reviewScreenForegroundColor = buttonAndFeedbackBarTextColor;
        defaultCustomization.getIdScanCustomization().reviewScreenTextBackgroundColor = buttonAndFeedbackBarColor;
        defaultCustomization.getIdScanCustomization().captureScreenForegroundColor = buttonAndFeedbackBarTextColor;
        defaultCustomization.getIdScanCustomization().captureScreenTextBackgroundColor = buttonAndFeedbackBarColor;
        defaultCustomization.getIdScanCustomization().buttonBackgroundNormalColor = buttonAndFeedbackBarColor;
        defaultCustomization.getIdScanCustomization().buttonBackgroundDisabledColor = buttonColorDisabled;
        defaultCustomization.getIdScanCustomization().buttonBackgroundHighlightColor = buttonColorHighlight;
        defaultCustomization.getIdScanCustomization().buttonTextNormalColor = buttonAndFeedbackBarTextColor;
        defaultCustomization.getIdScanCustomization().buttonTextDisabledColor = buttonAndFeedbackBarTextColor;
        defaultCustomization.getIdScanCustomization().buttonTextHighlightColor = buttonAndFeedbackBarTextColor;
        defaultCustomization.getIdScanCustomization().captureScreenBackgroundColor = frameColor;
        defaultCustomization.getIdScanCustomization().captureFrameStrokeColor = borderColor;

        
        return defaultCustomization;
    }

    
    public static FaceTecCustomization retrieveLowLightConfigurationWizardCustomization() {
        return retrieveConfigurationWizardCustomization();
    }
    
        
    public static FaceTecCustomization retrieveDynamicDimmingConfigurationWizardCustomization() {
        return retrieveConfigurationWizardCustomization();
    }
    
    
    public static FaceTecCustomization currentCustomization = retrieveConfigurationWizardCustomization();
    public static FaceTecCustomization currentLowLightCustomization = retrieveLowLightConfigurationWizardCustomization();
    public static FaceTecCustomization currentDynamicDimmingCustomization = retrieveDynamicDimmingConfigurationWizardCustomization();
    
    // -------------------------------------
    // Boolean to indicate the FaceTec SDK Configuration Wizard was used to generate this file.
    // In this Sample App, if this variable is true, a "Config Wizard Theme" will be added to this App's "Toggle Colors & Themes" menu,
    // and choosing this option will set the FaceTec SDK UI/UX Customizations to the Customizations that you selected in the
    // Configuration Wizard.
    public static boolean wasSDKConfiguredWithConfigWizard = true;

    public static void AuthenticateAgipee()
    {
        try {

            RequestBody formBody = new FormBody.Builder().add("client_id", clientID)
                    .add("client_secret", clientSecret).build();

            okhttp3.Request request = new okhttp3.Request.Builder()
                    .url(baseURLCredentials).post(formBody).build();
            client.newCall(request).enqueue(new Callback() {
                @Override
                public void onFailure(@NonNull Call call, IOException e) {
                    System.out.println(e);
                }

                @Override
                public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                    assert response.body() != null;
                    String responseString = response.body().string();
                    response.body().close();
                    try {
                        JSONObject responseJSON = new JSONObject(responseString);
                        accessToken = responseJSON.getString("access_token");
                    }catch(JSONException e) {
                        // CASE:  Parsing the response into JSON failed --> You define your own API contracts with yourself and may choose to do something different here based on the error.  Solid server-side code should ensure you don't get to this case.
                        e.printStackTrace();
                        Log.d("FaceTecSDKSampleApp", "Exception raised while attempting to parse JSON result.");
                    }
                }
            });


        }
        catch(Exception e) {
            e.printStackTrace();
            Log.d("FaceTecSDKSampleApp", "Exception raised while attempting to create JSON payload for upload.");
        }
    }

    public static void getConfigFacetec(SampleAppActivity sampleAppActivity) {

        try {

            okhttp3.Request request = new okhttp3.Request.Builder()
                    .url("https://vinhedo-portal-cidadao-api.mitraonline.com.br/api/v1/configuracao/facetec/pesquisar").get().build();
            client.newCall(request).enqueue(new Callback() {
                @Override
                public void onFailure(@NonNull Call call, IOException e) {
                    System.out.println(e);
                }

                @Override
                public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                    assert response.body() != null;
                    String responseString = response.body().string();
                    response.body().close();
                    try {
                        JSONObject responseJSON = new JSONObject(responseString);
                        String dados = responseJSON.getString("dados");
                        JSONObject dadosJSON = new JSONObject(dados);
                        String apiResultado = dadosJSON.getString("apiResultado");
                        if(apiResultado.equals("S")){
                            String apiDadosBase64 = dadosJSON.getString("apiDados");
                            byte[] decodeValueApiDados = Base64.decode(apiDadosBase64, Base64.DEFAULT);
                            String apiDados = new String(decodeValueApiDados);
                            JSONObject apiDadosJSON = new JSONObject(apiDados);

                            DeviceKeyIdentifier = apiDadosJSON.getString("device_key");
                            BaseURL = apiDadosJSON.getString("base_url");
                            PublicFaceScanEncryptionKey = apiDadosJSON.getString("public_encription_key");

                            ProductionKeyText = apiDadosJSON.getString("public_text_key");

                            clientID = apiDadosJSON.getString("client_id");
                            clientSecret = apiDadosJSON.getString("client_secret");
                            baseURLCredentials = apiDadosJSON.getString("base_url_credentials");

                            AuthenticateAgipee();

                            // Initialize FaceTec SDK
                            Config.initializeFaceTecSDKFromAutogeneratedConfig(sampleAppActivity, new FaceTecSDK.InitializeCallback() {
                                @Override
                                public void onCompletion(final boolean successful) {
                                    if(successful) {
                                        sampleAppActivity.utils.enableAllButtons();

                                        //Pega as variaves passadas do FaceTecModule para iniciar um módulo específico
                                        Bundle extras = sampleAppActivity.getIntent().getExtras();
                                        String inicialModule = extras.getString("inicialModule");
                                        String externalID = extras.getString("externalID");

                                        sampleAppActivity.latestExternalDatabaseRefID = externalID;


                                        //Faz as verificações para ver qual módulo iniciar diretamente
                                        switch(inicialModule) {
                                            case "livenessCheck":
                                                sampleAppActivity.onLivenessCheckPressed(null);
                                                break;
                                            case "enrollUser":
                                                sampleAppActivity.onEnrollUserPressed(null);
                                                break;
                                            case "authenticateUser":
                                                sampleAppActivity.onVerifyUserPressed(null);
                                                break;
                                            case "photoIDMatch":
                                                sampleAppActivity.onPhotoIDMatchPressed(null);
                                                break;
                                            case "photoIDScanOnly":
                                                sampleAppActivity.onPhotoIDScanOnlyPressed(null);
                                                break;
                                            default:
                                        }


                                    }
                                    else {
                                        // Displays the FaceTec SDK Status to text field if init failed.
                                        sampleAppActivity.utils.displayStatus(FaceTecSDK.getStatus(sampleAppActivity).toString());
                                    }
                                }
                            });
                        }
                    }catch(JSONException e) {
                        // CASE:  Parsing the response into JSON failed --> You define your own API contracts with yourself and may choose to do something different here based on the error.  Solid server-side code should ensure you don't get to this case.
                        e.printStackTrace();
                        Log.d("FaceTecSDKSampleApp", "Exception raised while attempting to parse JSON result.");
                    }
                }
            });
        }
        catch(Exception e) {
            e.printStackTrace();
            Log.d("FaceTecSDKSampleApp", "Exception raised while attempting to create JSON payload for upload.");
        }
    }
}
